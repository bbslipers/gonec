ЗагрузитьИВыполнить("test.gnc")

Функция ТестСоздание()
  с = ""
  Тест.Равно(`пустая строка через ""`, 0, длина(с))

  с = ''
  Тест.Равно("пустая строка через ''", 0, длина(с))

  с = ``
  Тест.Равно("пустая строка через ``", 0, длина(с))

  с = "строчка"
  Тест.Равно(`непустая строка через ""`, 7, длина(с))

  с = 'строчка'
  Тест.Равно("непустая строка через ''", 7, длина(с))

  с = `"строчка"`
  Тест.Равно("непустая строка через ``", 9, длина(с))

  с = "\"строчка\""
  Тест.Равно(`строка через "" с эскейпом "`, `"строчка"`, с)

  с = '\'строчка\''
  Тест.Равно(`строка через '' с эскейпом '`, `'строчка'`, с)

  с = '"строчка"'
  Тест.Равно(`строка через '' без эскейпа "`, `"строчка"`, с)

  с = "'строчка'"
  Тест.Равно(`строка через "" без эскейпа '`, `'строчка'`, с)

  с = Новый Строка
  Тест.Равно("пустая строка через 'Новый Строка'", 0, длина(с))

  с = Новый Строка()
  Тест.Равно("пустая строка через 'Новый Строка()'", 0, длина(с))

  с = "english"
  Тест.Равно("строка с ascii символами", 7, длина(с))

  с = "русский"
  Тест.Равно("строка с unicode символами", 7, длина(с))

  с = "\nа"
  Тест.Равно("строка с hex-эскейпом для новой строки", `
а`, с)

  с = "\nа"
  Тест.Равно("длина строки с hex-эскейпом для новой строки", 2, длина(с))

  Возврат истина, ""
КонецФункции

Функция ТестОперации(максн)
  Тест.Равно(`сложение пустых строк ""+''`, "", ""+'')
  Тест.Равно("сложение пустых строк ''+``", "", ''+``)
  Тест.Равно(`сложение строк "строчка"+"string"`, "строчкаstring", "строчка"+"string")

  с = ""
  Для н=1 По максн Цикл
    с += "аa"
  КонецЦикла
  Тест.Равно(Формат(`умножение строки на число "аa"*%d`, максн), с, "аa"*максн)
  Тест.Равно(`вычитание строк "аaаaаa..."-"аa"`, "", с-"аa")

  Возврат истина, ""
КонецФункции

Функция ТестСлайсИДоступ(максн)
  с = "строчкаstring" * максн
  Тест.Равно(`слайс начала строки "строчкаstringстрочкаstring..."`, "строчкаstring", с[:Длина("строчкаstring")])
  Тест.Равно(`слайс конца строки "строчкаstringстрочкаstring..."`, 
    "строчкаstring"*(максн-1), с[Длина("строчкаstring"):])

  Возврат истина, ""
КонецФункции

Функция ТестМодификацияСтрок(максн)
  Тест.Равно("НРег с ascii символами", "abc"*максн, НРег("ABC"*максн))
  Тест.Равно("НРег с unicode символами", "абв"*максн, НРег("АБВ"*максн))

  Тест.Равно("ВРег с ascii символами", "ABC"*максн, ВРег("abc"*максн))
  Тест.Равно("ВРег с unicode символами", "АБВ"*максн, ВРег("абв"*максн))

  Тест.Равно("Лев с ascii символами", "abc", Лев("abc"*максн, 3))
  Тест.Равно("Лев с unicode символами", "абв", Лев("абв"*максн, 3))

  Тест.Равно("Прав с ascii символами", "abc", Прав("abc"*максн, 3))
  Тест.Равно("Прав с unicode символами", "абв", Прав("абв"*максн, 3))

  Тест.Равно("Сред без длины с ascii символами", "abc"*(максн-1), Сред("abc"*максн, 4))
  Тест.Равно("Сред с ascii символами", "abc", Сред("abc"*максн, 1, 3))
  Тест.Равно("Сред без длины с unicode символами", "абв"*(максн-1), Сред("абв"*максн, 4))
  Тест.Равно("Сред с unicode символами", "абв", Сред("абв"*максн, 1, 3))

  Тест.Равно("СокрЛ не изменяет строку когда нет пробельных символов",
    "строчка"*максн, СокрЛ("строчка"*максн))
  Тест.Равно("СокрЛ сокращает только с левой стороны", 
    "строчка"*максн+"\t\f\r\n"*максн, СокрЛ("\t\f\r\n"*максн+"строчка"*максн+"\t\f\r\n"*максн))

  Тест.Равно("СокрП не изменяет строку когда нет пробельных символов",
    "строчка"*максн, СокрП("строчка"*максн))
  Тест.Равно("СокрП сокращает только с правой стороны", 
    "\t\f\r\n"*максн+"строчка"*максн, СокрП("\t\f\r\n"*максн+"строчка"*максн+"\t\f\r\n"*максн))

  Тест.Равно("СокрЛП не изменяет строку когда нет пробельных символов",
    "строчка"*максн, СокрЛП("строчка"*максн))
  Тест.Равно("СокрЛП сокращает с обоих сторон",
    "строчка"*максн, СокрЛП("\t\f\r\n"*максн+"строчка"*максн+"\t\f\r\n"*максн))

  Возврат истина, ""
КонецФункции

Функция ТестДопФункций(максн)
  Тест.Равно("хэш от строки возвращает строку", "строка", ТипЗнч(Хэш("123")))
  Тест.Равно("хэш от массива возвращает строку", "строка", ТипЗнч(Хэш([])))
  Тест.Равно("хэш от структуры возвращает строку", "строка", ТипЗнч(Хэш({})))

  с = СлучайнаяСтрока("а", 10)
  Тест.Равно("СлучайнаяСтрока использует только символы из переданного алфавита", "аааааааааа", с)

  строки = []
  Для н=1 По максн Цикл
    строки += [СлучайнаяСтрока("0123456789abcdef", 10)]
  КонецЦикла
  Тест.Равно("СлучайнаяСтрока возвращает разные строки", максн, Длина(строки.СкопироватьУникальные()))


  строки = []
  Для н=1 По максн Цикл
    строки += [УникальныйИдентификатор()]
  КонецЦикла
  Тест.Равно("УникальныйИдентификатор возвращает разные строки", максн, Длина(строки.СкопироватьУникальные()))

  Тест.Равно("Формат умеет форматировать строки", "\"строка\" тест", Формат("%s тест", `"строка"`))
  Тест.Равно("Формат умеет форматировать числа", "123 тест", Формат("%d тест", 123))

  Тест.Равно("КодСимвола правильно работает с цифрами", 48, КодСимвола("0"))
  Тест.Равно("КодСимвола правильно работает с ascii символами", 97, КодСимвола("a"))
  Тест.Равно("КодСимвола правильно работает с unicode символами", 1072, КодСимвола("а"))

  Возврат истина, ""
КонецФункции

Функция ТестМногострочныеФункции()
  Тест.Равно("СтрЧислоСтрок с пустой строкой", 0, СтрЧислоСтрок(""))
  Тест.Равно("СтрЧислоСтрок с строкой состоящей только из unix переноса строки", 0, СтрЧислоСтрок("\n"))
  Тест.Равно("СтрЧислоСтрок с строкой состоящей только из windows переноса строки", 0, СтрЧислоСтрок("\r\n"))

  Тест.Равно("СтрЧислоСтрок с непустой строкой", 1, СтрЧислоСтрок("строчка"))
  Тест.Равно("СтрЧислоСтрок с непустой строкой оканчивающейся на unix переносе строки", 
    1, СтрЧислоСтрок("строчка\n"))
  Тест.Равно("СтрЧислоСтрок с непустой строкой оканчивающейся на windows переносе строки", 
    1, СтрЧислоСтрок("строчка\r\n"))

  Тест.Равно("СтрЧислоСтрок с многострочной строкой", 3, СтрЧислоСтрок(`строка 1
строка 2
строка 3
`))

  Тест.Равно("СтрПолучитьСтроку с одной строкой", "строчка", СтрПолучитьСтроку(`строчка
`, 1))
  Тест.Равно("СтрПолучитьСтроку с началом многострочной строки", "строка 1", СтрПолучитьСтроку(`строка 1
строка 2
строка 3
`, 1))
  Тест.Равно("СтрПолучитьСтроку с концом многострочной строки", "строка 3", СтрПолучитьСтроку(`строка 1
строка 2
строка 3

`, 3))

  Возврат истина, ""
КонецФункции

Функция ТестФункцииСМассивами()
  Тест.Равно("СтрРазделить без доп. параметра по одному разделителю", 
    ["", "а=1", "б=2", ""], СтрРазделить(";а=1;б=2;", ";"))

  Тест.Равно("СтрРазделить ВключатьПустые=истина по одному разделителю", 
    ["", "а=1", "б=2", ""], СтрРазделить(";а=1;б=2;", ";", истина))

  Тест.Равно("СтрРазделить ВключатьПустые=ложь по одному разделителю", 
    ["а=1", "б=2"], СтрРазделить(";а=1;б=2;", ";", ложь))

  Тест.Равно("СтрРазделить без доп. параметра по нескольким разделителям", 
    ["", "а", "1", "б", "2", ""], СтрРазделить(";а=1;б=2;", "=;"))

  Тест.Равно("СтрРазделить ВключатьПустые=истина по нескольким разделителям", 
    ["", "а", "1", "б", "2", ""], СтрРазделить(";а=1;б=2;", ";=", истина))

  Тест.Равно("СтрРазделить ВключатьПустые=ложь по нескольким разделителям", 
    ["а", "1", "б", "2"], СтрРазделить(";а=1;б=2;", ";=", ложь))

  Тест.Равно("СтрСоединить с пустым массивом", "", СтрСоединить([], "соед"))
  Тест.Равно("СтрСоединить с пустым соединителем", "абв", СтрСоединить(["а", "б", "в"], ""))
  Тест.Равно("СтрСоединить с непустыми параметрами", "а;-б;-в", СтрСоединить(["а", "б", "в"], ";-"))

  Возврат истина, ""
КонецФункции

Функция ТестПредикаты()
  Тест.Равно("СтрПустая с пустой строкой", истина, СтрПустая(""))
  Тест.Равно("СтрПустая со строкой из пробелов", истина, СтрПустая(" \t\n\f\r"))
  Тест.Равно("СтрПустая с непустой строкой", ложь, СтрПустая(" \tстрочка\n\r"))

  Тест.Бросает("СтрНачинаетсяС бросает исключение если префикс пустой",
    Функция () СтрНачинаетсяС("строчка", "") КонецФункции, "Префикс не может быть пустым")
  
  Возврат истина, ""
КонецФункции

Тест.Исполнить("создание строки", ТестСоздание)
Для Каждого дл из [1, 10, 100, 200, 1000] Цикл
  Тест.Исполнить(Формат("операции над строками длины %d", дл), ТестОперации, дл)
  Тест.Исполнить(Формат("слайсы и доступ к элементам строк длины %d", дл), ТестСлайсИДоступ, дл)
  Тест.Исполнить(Формат("функции для операций над строками длины %d", дл), ТестМодификацияСтрок, дл)
  Тест.Исполнить(Формат("дополнительные функции со строками длины %d", дл), ТестДопФункций, дл)
КонецЦикла
Тест.Исполнить("работа с многострочными строками", ТестМногострочныеФункции)
Тест.Исполнить("работа с массивами строк", ТестФункцииСМассивами)
Тест.Исполнить("строковые предикаты", ТестПредикаты)