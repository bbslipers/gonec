package ntw

import (
	"strings"
)

func init() {
	// register the language
	Languages["uk-ua"] = Language{
		Name:    "Ukrainian",
		Aliases: []string{"uk", "uk-ua", "uk_UA", "ukrainian"},
		Flag:    "üá∫üá¶",

		IntegerToWords: IntegerToUkUa,
	}
}

func ukPlural(n int, words []string) string {
	return plural(n, words)
}

// IntegerToUkUa converts an integer to UK words
func IntegerToUkUa(input int) string {
	var ukUnits = []string{
		"",
		"–æ–¥–∏–Ω",
		"–¥–≤–∞",
		"—Ç—Ä–∏",
		"—á–æ—Ç–∏—Ä–∏",
		"–ø'—è—Ç—å",
		"—à—ñ—Å—Ç—å",
		"—Å—ñ–º",
		"–≤—ñ—Å—ñ–º",
		"–¥–µ–≤'—è—Ç—å",
	}
	var ukTeens = []string{
		"–¥–µ—Å—è—Ç—å",
		"–æ–¥–∏–Ω–∞–¥—Ü—è—Ç—å",
		"–¥–≤–∞–Ω–∞–¥—Ü—è—Ç—å",
		"—Ç—Ä–∏–Ω–∞–¥—Ü—è—Ç—å",
		"—á–æ—Ç–∏—Ä–Ω–∞–¥—Ü—è—Ç—å",
		"–ø'—è—Ç–Ω–∞–¥—Ü—è—Ç—å",
		"—à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç—å",
		"—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å",
		"–≤—ñ—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å",
		"–¥–µ–≤'—è—Ç–Ω–∞–¥—Ü—è—Ç—å",
	}
	var ukTens = []string{
		"",
		"–¥–µ—Å—è—Ç—å",
		"–¥–≤–∞–¥—Ü—è—Ç—å",
		"—Ç—Ä–∏–¥—Ü—è—Ç—å",
		"—Å–æ—Ä–æ–∫",
		"–ø'—è—Ç–¥–µ—Å—è—Ç",
		"—à—ñ—Å—Ç–¥–µ—Å—è—Ç",
		"—Å—ñ–º–¥–µ—Å—è—Ç",
		"–≤—ñ—Å—ñ–º–¥–µ—Å—è—Ç",
		"–¥–µ–≤'—è–Ω–æ—Å—Ç–æ",
	}
	var ukHundreds = []string{
		"",
		"—Å—Ç–æ",
		"–¥–≤—ñ—Å—Ç—ñ",
		"—Ç—Ä–∏—Å—Ç–∞",
		"—á–æ—Ç–∏—Ä–∏—Å—Ç–∞",
		"–ø'—è—Ç—Å–æ—Ç",
		"—à—ñ—Å—Ç—Å–æ—Ç",
		"—Å—ñ–º—Å–æ—Ç",
		"–≤—ñ—Å—ñ–º—Å–æ—Ç",
		"–¥–µ–≤'—è—Ç—Å–æ—Ç",
	}
	var ukMegas = [][]string{
		{"", "", ""},
		{"—Ç–∏—Å—è—á–∞", "—Ç–∏—Å—è—á—ñ", "—Ç–∏—Å—è—á"},                    // 10^3
		{"–º—ñ–ª—å–π–æ–Ω", "–º—ñ–ª—å–π–æ–Ω–∞", "–º—ñ–ª—å–π–æ–Ω—ñ–≤"},             // 10^6
		{"–º—ñ–ª—å—è—Ä–¥", "–º—ñ–ª—å—è—Ä–¥–∞", "–º—ñ–ª—å—è—Ä–¥—ñ–≤"},             // 10^9
		{"—Ç—Ä–∏–ª—å–π–æ–Ω", "—Ç—Ä–∏–ª—å–π–æ–Ω–∞", "—Ç—Ä–∏–ª—å–π–æ–Ω—ñ–≤"},          // 10^12
		{"–∫–≤–∞–¥—Ä–∏–ª—å–π–æ–Ω", "–∫–≤–∞–¥—Ä–∏–ª—å–π–æ–Ω–∞", "–∫–≤–∞–¥—Ä–∏–ª—å–π–æ–Ω—ñ–≤"}, // 10^15
		{"–∫–≤—ñ–Ω—Ç–∏–ª—å–π–æ–Ω", "–∫–≤—ñ–Ω—Ç–∏–ª—å–π–æ–Ω–∞", "–∫–≤—ñ–Ω—Ç–∏–ª—å–π–æ–Ω—ñ–≤"}, // 10^18
		{"—Å–µ–∫—Å—Ç–∏–ª—å–π–æ–Ω", "—Å–µ–∫—Å—Ç–∏–ª—å–π–æ–Ω–∞", "—Å–µ–∫—Å—Ç–∏–ª—å–π–æ–Ω—ñ–≤"}, // 10^21
		{"—Å–µ–ø—Ç–∏–ª—å–π–æ–Ω", "—Å–µ–ø—Ç–∏–ª—å–π–æ–Ω–∞", "—Å–µ–ø—Ç–∏–ª—å–π–æ–Ω—ñ–≤"},    // 10^34
		{"–æ–∫—Ç–∏–ª—å–π–æ–Ω", "–æ–∫—Ç–∏–ª—å–π–æ–Ω–∞", "–æ–∫—Ç–∏–ª—å–π–æ–Ω—ñ–≤"},       // 10^27
	}

	var words []string

	if input < 0 {
		words = append(words, "–º—ñ–Ω—É—Å")
		input *= -1
	}

	// split integer in triplets
	triplets := integerToTriplets(input)

	// zero is a special case
	if len(triplets) == 0 {
		return "–Ω—É–ª—å"
	}

	// iterate over triplets
	for idx := len(triplets) - 1; idx >= 0; idx-- {
		triplet := triplets[idx]

		// nothing todo for empty triplet
		if triplet == 0 {
			continue
		}

		// three-digits
		hundreds := triplet / 100 % 10
		tens := triplet / 10 % 10
		units := triplet % 10

		if hundreds > 0 {
			words = append(words, ukHundreds[hundreds])
		}

		if tens > 0 || units > 0 {
			switch tens {
			case 0:
				words = append(words, ukOneTwoUnitFix(units, idx, ukUnits))
			case 1:
				words = append(words, ukTeens[units])
				break
			default:
				words = append(words, ukTens[tens])
				if units > 0 {
					words = append(words, ukOneTwoUnitFix(units, idx, ukUnits))
				}
				break
			}
		}

		// mega
		if idx >= 1 && idx < len(ukMegas) {
			mega := ukMegas[idx]
			tens = tens*10 + units
			if len(mega) > 0 {
				words = append(words, ukPlural(tens, mega))
			}
		}
	}

	return strings.Join(words, " ")
}

func ukOneTwoUnitFix(unit, idx int, arr []string) string {
	if idx == 1 {
		switch unit {
		case 1:
			return "–æ–¥–Ω–∞"
		case 2:
			return "–¥–≤—ñ"
		}
	}

	return arr[unit]
}
